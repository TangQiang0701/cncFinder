# -- coding: utf-8 --
# author : TangQiang
# time   : 2025/3/15
# email  : tangqiang.0701@gmail.com
# file   : nodeFeature.py
import more_itertools
from collections import Counter
import itertools


def count_mers(seq, k=1):
    return Counter(("".join(mers) for mers in more_itertools.windowed(seq, k)))

def make_kmer_list(merk=3):
    dna = ['A', 'C', 'G', 'T']
    kmer = []
    for i in itertools.product(dna, repeat=merk):
        k = list(i)
        key = ''.join(k)
        kmer.append(key)
    return kmer

def one_hot(seq):
    one_hot_codding = {
        'A': [1, 0, 0, 0],
        'C': [0, 1, 0, 0],
        'G': [0, 0, 1, 0],
        'T': [0, 0, 0, 1]
    }
    binary_profile = []
    for s in list(seq):
        binary_profile.extend(one_hot_codding.get(s))
    return binary_profile

def DinBipFreq(seq):
    dibp_codding = {
        'AA': [0, 0, 0, 0],
        'AC': [0, 0, 0, 1],
        'AG': [0, 0, 1, 0],
        'AT': [0, 0, 1, 1],
        'CA': [0, 1, 0, 0],
        'CC': [0, 1, 0, 1],
        'CG': [0, 1, 1, 0],
        'CT': [0, 1, 1, 1],
        'GA': [1, 0, 0, 0],
        'GC': [1, 0, 0, 1],
        'GG': [1, 0, 1, 0],
        'GT': [1, 0, 1, 1],
        'TA': [1, 1, 0, 0],
        'TC': [1, 1, 0, 1],
        'TG': [1, 1, 1, 0],
        'TT': [1, 1, 1, 1]
    }
    dbinprofile = []
    seqLen = len(seq)
    for i in range(1,seqLen):
        s = seq[i-1:i+1]
        ss = seq[:i+1]
        c_mers = count_mers(ss, k=2)
        c = c_mers.get(s)/len(ss)
        dbinprofile.extend(dibp_codding.get(s))
        dbinprofile.append(c)
    return dbinprofile


def DPCP(seq):
    def min_max_normal():
        orgdinPhyPro15 = {
            'AA': [0.04, 0.08, 0.07, 6.69, 6.24, 21.34, 1.05, -1.26, 35.02, -0.18, 0.01, 3.25, -1.00, -7.60, -21.3],
            'TT': [0.04, 0.08, 0.07, 6.69, 6.24, 21.34, 1.05, -1.26, 35.02, -0.18, 0.01, 3.25, -1.00, -7.60, -21.3],
            'AC': [0.06, 0.07, 0.06, 6.8, 2.91, 21.98, 2.01, 0.33, 31.53, -0.59, -0.02, 3.24, -1.44, -8.40, -22.4],
            'GT': [0.06, 0.07, 0.06, 6.8, 2.91, 21.98, 2.01, 0.33, 31.53, -0.59, -0.02, 3.24, -1.44, -8.40, -22.4],
            'AG': [0.04, 0.06, 0.05, 3.47, 2.8, 17.48, 3.6, -1.66, 32.29, -0.22, -0.02, 3.32, -1.28, -7.80, -21.0],
            'CT': [0.04, 0.06, 0.05, 3.47, 2.8, 17.48, 3.6, -1.66, 32.29, -0.22, -0.02, 3.32, -1.28, -7.80, -21.0],
            'AT': [0.05, 0.1, 0.07, 9.61, 4.66, 24.79, 0.61, 0, 30.72, -0.68, 0, 3.21, -0.88, -7.20, -20.4],
            'CA': [0.04, 0.06, 0.05, 2, 2.88, 14.51, 5.6, 0.14, 35.43, 0.48, 0.01, 3.37, -1.45, -8.50, -22.7],
            'TG': [0.04, 0.06, 0.05, 2, 2.88, 14.51, 5.6, 0.14, 35.43, 0.48, 0.01, 3.37, -1.45, -8.50, -22.7],
            'CC': [0.04, 0.06, 0.06, 2.99, 2.67, 14.25, 4.68, -0.77, 33.54, -0.17, 0.03, 3.36, -1.84, -8.00, -19.9],
            'GG': [0.04, 0.06, 0.06, 2.99, 2.67, 14.25, 4.68, -0.77, 33.54, -0.17, 0.03, 3.36, -1.84, -8.00, -19.9],
            'CG': [0.04, 0.06, 0.05, 2.71, 3.02, 14.66, 6.02, 0, 33.67, 0.44, 0, 3.29, -2.17, -10.60, -27.2],
            'GA': [0.05, 0.07, 0.06, 4.27, 3.58, 18.41, 2.44, 1.44, 35.67, -0.05, -0.01, 3.3, -1.30, -8.20, -22.20],
            'TC': [0.05, 0.07, 0.06, 4.27, 3.58, 18.41, 2.44, 1.44, 35.67, -0.05, -0.01, 3.3, -1.30, -8.20, -22.20],
            'GC': [0.05, 0.07, 0.06, 4.21, 2.66, 17.31, 1.7, 0, 34.07, -0.19, 0, 3.27, -2.24, -9.80, -24.4],
            'TA': [0.03, 0.07, 0.05, 1.85, 4.11, 14.24, 3.5, 0, 36.94, 0.04, 0, 3.39, -0.58, -7.20, -21.3]
        }
        dinPhyPro15 = {}
        max_v = [0.04, 0.08, 0.07, 6.69, 6.24, 21.34, 1.05, -1.26, 35.02, -0.18, 0.01, 3.25, -1.00, -7.60, -21.3]
        min_v = [0.04, 0.08, 0.07, 6.69, 6.24, 21.34, 1.05, -1.26, 35.02, -0.18, 0.01, 3.25, -1.00, -7.60, -21.3]
        for i in range(15):
            for key, values in orgdinPhyPro15.items():
                max_v[i] = values[i] if values[i] > max_v[i] else max_v[i]
                min_v[i] = values[i] if values[i] < min_v[i] else min_v[i]
        for key, values in orgdinPhyPro15.items():
            v_len = len(values)
            dinPhyPro15[key] = [(values[i] - min_v[i]) / (max_v[i] - min_v[i]) for i in range(v_len)]
        return dinPhyPro15
    dpcp = []
    dinPhyPro15 = min_max_normal()
    list_2mer = make_kmer_list(2)
    total_kmer = len(seq) - 2 + 1
    c = count_mers(seq, 2)
    for kmer in list_2mer:
        kmerFreq = c[kmer]/total_kmer
        dinPhyPro = dinPhyPro15.get(kmer)
        dpcp.extend([kmerFreq*i for i in dinPhyPro])
    return dpcp

def TPCP(seq):
    def min_max_normal():
        orgtriPhyPro11 = {
            'GGG': [5.70, 5.85, 3, 13, 5.83, 5.83, 3.31, 3.87, 622.40, 6.00, 3.54],
            'GGA': [6.20, 5.00, 2, 5, 4.99, 4.99, 3.82, 3.58, 622.40, 3.80, 4.80],
            'GGC': [8.20, 9.10, 3, 45, 9.08, 9.08, 1.39, 2.45, 622.40, 10.00, 1.31],
            'GGT': [5.20, 5.30, 2, 8, 5.32, 5.32, 3.62, 4.16, 622.40, 5.40, 3.88],
            'GAG': [6.60, 6.00, 2, 8, 5.98, 5.98, 3.22, 3.35, 621.40, 5.40, 3.88],
            'GAA': [5.10, 4.05, 1, 12, 4.06, 4.06, 4.39, 4.21, 621.40, 3.00, 5.26],
            'GAC': [5.60, 5.50, 2, 8, 5.52, 5.52, 3.50, 3.93, 621.40, 5.40, 3.88],
            'GAT': [3.60, 4.45, 1, 7, 4.44, 4.44, 4.15, 5.09, 621.40, 5.30, 3.94],
            'GCG': [4.30, 5.90, 3, 25, 5.89, 5.89, 3.28, 4.68, 622.40, 7.50, 2.69],
            'GCA': [7.50, 6.75, 2, 13, 6.76, 6.76, 2.75, 2.84, 622.40, 6.00, 3.54],
            'GCC': [8.20, 9.10, 3, 45, 9.08, 9.08, 1.39, 2.45, 622.40, 10.00, 1.31],
            'GCT': [6.30, 6.90, 2, 25, 6.88, 6.88, 2.68, 3.52, 622.40, 7.50, 2.69],
            'GTG': [6.80, 6.65, 2, 17, 6.63, 6.63, 2.83, 3.24, 621.40, 6.50, 3.25],
            'GTA': [6.40, 5.05, 1, 6, 5.07, 5.07, 3.77, 3.47, 621.40, 3.70, 4.86],
            'GTC': [5.60, 5.50, 2, 8, 5.52, 5.52, 3.50, 3.93, 621.40, 5.40, 3.88],
            'GTT': [1.60, 2.65, 1, 6, 2.64, 2.64, 5.26, 6.27, 621.40, 3.70, 4.86],
            'AGG': [4.70, 5.05, 2, 8, 5.05, 5.05, 3.78, 4.45, 622.40, 5.40, 3.88],
            'AGA': [6.50, 4.90, 1, 9, 4.89, 4.89, 3.88, 3.41, 622.40, 3.30, 5.09],
            'AGC': [6.30, 6.90, 2, 25, 6.88, 6.88, 2.68, 3.52, 622.40, 7.50, 2.69],
            'AGT': [2.00, 3.90, 1, 11, 3.92, 3.92, 4.47, 6.03, 622.40, 5.80, 3.65],
            'AAG': [4.20, 4.70, 1, 6, 4.70, 4.70, 4.00, 4.74, 621.40, 5.20, 3.99],
            'AAA': [0.10, 0.05, 0, 36, 0.06, 0.06, 6.88, 7.18, 621.40, 0.00, 7.05],
            'AAC': [1.60, 2.65, 1, 6, 2.64, 2.64, 5.26, 6.27, 621.40, 3.70, 4.86],
            'AAT': [0.00, 0.35, 0, 30, 0.35, 0.35, 6.70, 7.24, 621.40, 0.70, 6.62],
            'ACG': [5.20, 5.30, 2, 8, 5.31, 5.31, 3.63, 4.16, 622.40, 5.40, 3.88],
            'ACA': [5.80, 5.50, 1, 6, 5.49, 5.49, 3.52, 3.81, 622.40, 5.20, 3.99],
            'ACC': [5.20, 5.30, 2, 8, 5.32, 5.32, 3.62, 4.16, 622.40, 5.40, 3.88],
            'ACT': [2.00, 3.90, 1, 11, 3.92, 3.92, 4.47, 6.03, 622.40, 5.80, 3.65],
            'ATG': [8.70, 7.70, 1, 18, 7.72, 7.72, 2.19, 2.17, 621.40, 6.70, 3.14],
            'ATA': [9.70, 6.25, 0, 13, 6.27, 6.27, 3.05, 1.61, 621.40, 2.80, 5.38],
            'ATC': [3.60, 4.45, 1, 7, 4.44, 4.44, 4.15, 5.09, 621.40, 5.30, 3.94],
            'ATT': [0.00, 0.35, 0, 30, 0.35, 0.35, 6.70, 7.24, 621.40, 0.70, 6.62],
            'CGG': [3.00, 3.85, 3, 2, 3.87, 3.87, 4.50, 5.44, 622.40, 4.70, 4.28],
            'CGA': [5.80, 7.05, 2, 31, 7.07, 7.07, 2.57, 3.81, 622.40, 8.30, 2.25],
            'CGC': [4.30, 5.90, 3, 25, 5.89, 5.89, 3.28, 4.68, 622.40, 7.50, 2.69],
            'CGT': [5.20, 5.30, 2, 8, 5.31, 5.31, 3.63, 4.16, 622.40, 5.40, 3.88],
            'CAG': [9.60, 6.90, 2, 2, 6.90, 6.90, 2.67, 1.67, 621.40, 4.20, 4.57],
            'CAA': [6.20, 4.75, 1, 9, 4.76, 4.76, 3.96, 3.58, 621.40, 3.30, 5.09],
            'CAC': [6.80, 6.65, 2, 17, 6.63, 6.63, 2.83, 3.24, 621.40, 6.50, 3.25],
            'CAT': [8.70, 7.70, 1, 18, 7.72, 7.72, 2.19, 2.17, 621.40, 6.70, 3.14],
            'CCG': [3.00, 3.85, 3, 2, 3.87, 3.87, 4.50, 5.44, 622.40, 4.70, 4.28],
            'CCA': [0.70, 3.05, 2, 8, 3.06, 3.06, 5.00, 6.81, 622.40, 5.40, 3.88],
            'CCC': [5.70, 5.85, 3, 13, 5.83, 5.83, 3.31, 3.87, 622.40, 6.00, 3.54],
            'CCT': [4.70, 5.05, 2, 8, 5.05, 5.05, 3.78, 4.45, 622.40, 5.40, 3.88],
            'CTG': [9.60, 6.90, 2, 2, 6.90, 6.90, 2.67, 1.67, 621.40, 4.20, 4.57],
            'CTA': [7.80, 5.00, 1, 18, 5.00, 5.00, 3.81, 2.67, 621.40, 2.20, 5.73],
            'CTC': [6.60, 6.00, 2, 8, 5.98, 5.98, 3.22, 3.35, 621.40, 5.40, 3.88],
            'CTT': [4.20, 4.70, 1, 6, 4.70, 4.70, 4.00, 4.74, 621.40, 5.20, 3.99],
            'TGG': [0.70, 3.05, 2, 8, 3.06, 3.06, 5.00, 6.81, 622.40, 5.40, 3.88],
            'TGA': [10.00, 7.70, 1, 8, 7.70, 7.70, 10.00, 1.45, 622.40, 5.40, 3.88],
            'TGC': [7.50, 6.75, 2, 13, 6.76, 6.76, 2.75, 2.84, 622.40, 6.00, 3.54],
            'TGT': [5.80, 5.50, 1, 6, 5.49, 5.49, 3.52, 3.81, 622.40, 5.20, 3.99],
            'TAG': [7.80, 5.00, 1, 18, 5.00, 5.00, 3.81, 2.67, 621.40, 2.20, 5.73],
            'TAA': [7.30, 4.65, 0, 20, 4.67, 4.67, 4.01, 2.96, 621.40, 2.00, 5.85],
            'TAC': [6.40, 5.05, 1, 6, 5.07, 5.07, 3.77, 3.47, 621.40, 3.70, 4.86],
            'TAT': [9.70, 6.25, 0, 13, 6.27, 6.27, 3.05, 1.61, 621.40, 2.80, 5.38],
            'TCG': [5.80, 7.05, 2, 31, 7.07, 7.07, 2.57, 3.81, 622.40, 8.30, 2.25],
            'TCA': [10.00, 7.70, 1, 8, 7.70, 7.70, 2.20, 1.45, 622.40, 5.40, 3.88],
            'TCC': [6.20, 5.00, 2, 5, 4.99, 4.99, 3.82, 3.58, 622.40, 3.80, 4.80],
            'TCT': [6.50, 4.90, 1, 9, 4.89, 4.89, 3.88, 3.41, 622.40, 3.30, 5.09],
            'TTG': [6.20, 4.75, 1, 9, 4.76, 4.76, 3.96, 3.58, 621.40, 3.30, 5.09],
            'TTA': [7.30, 4.65, 0, 20, 4.67, 4.67, 4.01, 2.96, 621.40, 2.00, 5.85],
            'TTC': [5.10, 4.05, 1, 12, 4.06, 4.06, 4.39, 4.21, 621.40, 3.00, 5.26],
            'TTT': [0.10, 0.05, 0, 36, 0.06, 0.06, 0.10, 7.18, 621.40, 0.00, 7.05]
        }
        triPhyPro11 = {}
        max_v = [5.70, 5.85, 3, 13, 5.83, 5.83, 3.31, 3.87, 622.40, 6.00, 3.54]
        min_v = [5.70, 5.85, 3, 13, 5.83, 5.83, 3.31, 3.87, 622.40, 6.00, 3.54]
        for i in range(11):
            for key, values in orgtriPhyPro11.items():
                max_v[i] = values[i] if values[i] > max_v[i] else max_v[i]
                min_v[i] = values[i] if values[i] < min_v[i] else min_v[i]
        for key, values in orgtriPhyPro11.items():
            v_len = len(values)
            triPhyPro11[key] = [(values[i] - min_v[i]) / (max_v[i] - min_v[i]) for i in range(v_len)]
        return triPhyPro11

    tpcp = []
    triPhyPro11 = min_max_normal()
    list_2mer = make_kmer_list(3)
    total_kmer = len(seq) - 3 + 1
    c = count_mers(seq, 3)
    for kmer in list_2mer:
        kmerFreq = c[kmer] / total_kmer
        triPhyPro = triPhyPro11.get(kmer)
        tpcp.extend([kmerFreq * i for i in triPhyPro])
    return tpcp

def triEIIP(seq):
    def make_tri_eiip_list(merk=3):
        eiip = {'A': 0.126, 'C': 0.134, 'G': 0.0806, 'T': 0.1335}
        dna = ['A', 'C', 'G', 'T']
        kmer = []
        eiip_dict = {}
        for i in itertools.product(dna, repeat=merk):
            k = list(i)
            key = ''.join(k)
            kmer.append(key)
            eiip_dict[key] = eiip.get(k[0]) * eiip.get(k[1]) * eiip.get(k[2])
        return kmer, eiip_dict

    list_3mer, eiip_3mer = make_tri_eiip_list(3)
    triEiip = []
    c = count_mers(seq, 3)
    for kmer in list_3mer:
        triEiip.append(c[kmer] * eiip_3mer.get(kmer))
    return triEiip

def nFeatures(seq):
    onehot = one_hot(seq) # 4 * len
    dbf = DinBipFreq(seq) # 5*(len-1)
    dpcp = DPCP(seq) # 240
    tpcp = TPCP(seq) # 704
    trieiip = triEIIP(seq) # 64
    return  onehot + dbf + dpcp + tpcp + trieiip

